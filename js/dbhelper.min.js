class DBHelper{static get DATABASE_URL(){return `http://localhost:1337/restaurants`}
static get REVIEWS_URL(){return `http://localhost:1337/reviews`}
static fetchRestaurants(callback){fetch(DBHelper.DATABASE_URL).then(response=>{return response.json()}).then(response=>{let dbPromise=idb.open('restaurant',1,upgradeDb=>{upgradeDb.createObjectStore('restaurants',{keyPath:'id'});upgradeDb.createObjectStore('reviews',{keyPath:'id'});upgradeDb.createObjectStore('pending',{keyPath:'id',autoIncrement:!0})});dbPromise.then(function(db){var tx=db.transaction('restaurants','readwrite');var store=tx.objectStore('restaurants');response.forEach(function(restaurant){store.put(restaurant)});let reviewsPromise=new Promise(resolve=>{let i=0;var arr1=[];for(let restaurant of response){fetch(DBHelper.REVIEWS_URL+'/?restaurant_id='+restaurant.id).then(reviewsResponse=>{return reviewsResponse.json()}).then(reviewsResponse=>{arr1=[...arr1,...reviewsResponse];i++;var tx=db.transaction('reviews','readwrite');var store=tx.objectStore('reviews');reviewsResponse.forEach(function(review){store.put(review)});if(i===10){resolve(arr1)}})}})
reviewsPromise.then(reviewsResponse=>{callback(null,response,reviewsResponse)})}).then(function(){console.log('Added restaurants to restaurant IDB')})}).catch(error=>{console.log('offline');idb.open('restaurant',1).then(function(db){var tx=db.transaction('restaurants');var store=tx.objectStore('restaurants');var reviewstx=db.transaction('reviews');var reviewsstore=reviewstx.objectStore('reviews');function getRestaurants(){return new Promise(resolve=>{store.getAll().then(function(restaurants){resolve(restaurants)})})}
function getReviews(){return new Promise(resolve=>{reviewsstore.getAll().then(function(reviews){resolve(reviews)})})}
async function asyncCall(){let data=await Promise.all([getRestaurants(),getReviews()]);callback(null,data[0],data[1])};asyncCall()})})}
static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants,reviews)=>{if(error){callback(error,null)}else{const restaurant=restaurants.find(r=>r.id==id);let restaurantReviews=reviews.filter(val=>{return val.restaurant_id==id})
if(restaurant){callback(null,restaurant,restaurantReviews)}else{callback('Restaurant does not exist',null)}}})}
static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}
static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}
static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{let results=restaurants
if(cuisine!='all'){results=results.filter(r=>r.cuisine_type==cuisine)}
if(neighborhood!='all'){results=results.filter(r=>r.neighborhood==neighborhood)}
callback(null,results)}})}
static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{idb.open('restaurant',1).then(function(db){var pendingtx=db.transaction('pending');var pendingstore=pendingtx.objectStore('pending');pendingstore.getAll().then(function(reviews){for(let review of reviews){let reviewId=review.id;delete review.id;fetch('http://localhost:1337/reviews',{method:'POST',body:JSON.stringify(review)}).then(response=>{return response.json()}).then(data=>{var pendingtx=db.transaction('pending','readwrite');var pendingstore=pendingtx.objectStore('pending');pendingstore.delete(reviewId)})}})});if(error){callback(error,null)}else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood)
const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i)
callback(null,uniqueNeighborhoods)}})}
static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type)
const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i)
callback(null,uniqueCuisines)}})}
static urlForRestaurant(restaurant){return(`./restaurant.html?id=${restaurant.id}`)}
static imageUrlForRestaurant(restaurant){if(restaurant.photograph){return(`/img/${restaurant.photograph}-400x300.webp`)}else{return(`/img/${restaurant.id}-400x300.webp`)}}
static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker}}